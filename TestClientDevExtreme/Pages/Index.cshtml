@page
@using TestClientDevExtreme.Models
@using TestClientDevExtreme.Models.DTO

<h2>Home</h2>

<script>
var dxPopup = null; var dxFormObject = null;
var dxForm = null; var isEdit = false;
var dxPopupUpdate = null; dxPopupEditAll = null; var dxQuickInputObject = null;
var dxPopupCreate = null;
var keyObjectUpdate = null;
var dxformSearch = null; var formSearchObject = null;
var searchOptions = null;
var dxDataGrid = null; var changesDxGridStudent = null;
var StudentData = null;
$(document).ready(function(){
        $.ajax({
            url: "/Tests/GetDistrictByCityData",
            dataType: "json",
            type: "GET",
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            async: false,
            cache: false,
        }).done(function (rs) {
            StudentData = rs;
        }); 

    dxDataGrid = $("#dataGridStudent").dxDataGrid("instance");
    dxPopupCreate =  $("#create-popup").dxPopup("instance");
    dxPopupUpdate =  $("#update-popup").dxPopup("instance");
    dxPopupEditAll =  $("#update-select-popup").dxPopup("instance");
    dxformSearch = $("#dxFormSearch").dxForm("instance");
    formSearchObject = $('#dxFormSearch').dxForm('instance').option("formData");
})
function popUpCreateNew() {
     dxPopupCreate.show();
    dxForm = $("#formCreate").dxForm("instance")
    dxForm.option("dataSource", null);
    dxForm.getEditor("Name").option("value",null);
    dxForm.getEditor("DoB").option("value",null);
    dxForm.getEditor("ClassStudent").option("value",null);
    dxForm.getEditor("CityId").option("value",null);
                        dxDataGrid.clearSelection();
          keyObjectUpdate = null;
}

function Create() {
    var dxFormxx = $("#formCreate").dxForm("instance").option("formData");
           
    var newObject = {
        "Name" : dxFormxx.Name,
        "DoB" : dxFormxx.DoB,
        "ClassStudent" : dxFormxx.ClassStudent,
        "CityId" : dxFormxx.CityId,
        "DistrictId" : dxFormxx.DistrictId
    }
    var parameter = {search : JSON.stringify(newObject)}
    $.ajax({
            url: "/Tests/Create",
            dataType: "json",
            type: "POST",
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            async: false,
            cache: false,
            data: parameter
        }).done(function (rs) {
            DevExpress.ui.dialog.alert("Tạo mới thành công!", "Thông báo!");
            dxPopupCreate.hide();
            dxDataGrid.refresh();
        });
}

function update_student(e) {
    dxPopupUpdate.show();
    keyObjectUpdate = e.row.key;
    dxFormObject = $("#formUpdate").dxForm("instance");
    dxFormObject.getEditor("Name").option("value", e.row.data.Name)
    dxFormObject.getEditor("DoB").option("value", e.row.data.DoB)
    dxFormObject.getEditor("ClassStudent").option("value", e.row.data.ClassStudent)
    dxFormObject.getEditor("CityId").option("value", e.row.data.CityId)
    dxFormObject.getEditor("DistrictId").option("value", e.row.data.DistrictId)
}

function UpdateStudent() {
    var dxFormxx = $("#formUpdate").dxForm("instance").option("formData");
    var newObject = {
        "SchedulerId" : keyObjectUpdate,
        "Name" : dxFormxx.Name,
        "DoB" : dxFormxx.DoB,
        "ClassStudent" : dxFormxx.ClassStudent,
        "CityId" : dxFormxx.CityId,
        "DistrictId" : dxFormxx.DistrictId
    }
    var parameter = {search : JSON.stringify(newObject)}
    $.ajax({
            url: "/Tests/UpdateStudent",
            dataType: "json",
            type: "POST",
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            async: false,
            cache: false,
            data: parameter
        }).done(function (rs) {
            DevExpress.ui.dialog.alert("Cập nhật thành công!", "Thông báo!");
            dxPopupUpdate.hide();
            dxDataGrid.refresh();
        });
}

function delete_student(e) {
    var result = DevExpress.ui.dialog.confirm("<i>Bạn có chắc muốn xóa khảo sát? </i>", "Cảnh báo !!!");

      result.done(function (dialogResult) {
          if (dialogResult == true) { 
                var key = {
                    "id" : e.row.key,
                }
             $.ajax({
                    url: "/Tests/Delete",
                    dataType: "json",
                    type: "Post",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    async: false,
                    cache: false,
                    data: key
                }).done(function (rs) {
                    DevExpress.ui.dialog.alert("Xóa thành công!", "Thông báo!");
                    dxDataGrid.refresh();
                    dxDataGrid.clearSelection();
                });
          }
      })
}


function HidePopupUpdate() {
      var result = DevExpress.ui.dialog.confirm("<i>Bạn có chắc muốn đóng? </i>", "Cảnh báo !!!");
        result.done(function (dialogResult) {
            if (dialogResult == true) {
                isEdit = false;
                dxPopupUpdate.hide();
            }
        })
}

function HidePopupQuickInput() {
     var result = DevExpress.ui.dialog.confirm("<i>Bạn có chắc muốn đóng? </i>", "Cảnh báo !!!");
        result.done(function (dialogResult) {
            if (dialogResult == true) {
                //isEdit = false;
                dxPopupEditAll.hide();
            }
        })
}
function HidePopupCreate() {
      var result = DevExpress.ui.dialog.confirm("<i>Bạn có chắc muốn đóng? </i>", "Cảnh báo !!!");
        result.done(function (dialogResult) {
            if (dialogResult == true) {
                isEdit = false;
                dxPopupCreate.hide();
            }
        })
}

function City_ValueChanged(e) {
    var selectedRowsData = dxDataGrid.getSelectedRowsData();
    if (keyObjectUpdate > 0) {
        dxFormObject = $("#formUpdate").dxForm("instance");
        dxFormObject.getEditor("DistrictId").getDataSource().reload();
        dxFormObject.getEditor("DistrictId").option('value', null);
    } else if (selectedRowsData.length>0) {
        dxFormObject = $("#dxFormQuickInput").dxForm("instance");
        dxFormObject.getEditor("DistrictId").getDataSource().reload();
        dxFormObject.getEditor("DistrictId").option('value', null);
    } else {
        dxFormObject = $("#formCreate").dxForm("instance");
        dxFormObject.getEditor("DistrictId").getDataSource().reload();
        dxFormObject.getEditor("DistrictId").option('value', null);
    }
   
}

function GetCityId() {
    var selectedRowsData = dxDataGrid.getSelectedRowsData();

    if (keyObjectUpdate > 0) {
        dxFormGetCity = $("#formUpdate").dxForm("instance").option("formData");
    } else if (selectedRowsData.length>0) {
         dxFormGetCity = $("#dxFormQuickInput").dxForm("instance").option("formData");
    } else {
        dxFormGetCity = $("#formCreate").dxForm("instance").option("formData");
    }
        return dxFormGetCity.CityId;
}

function GetCityIdFromDataGrid(e) {
    if (Object.keys(e).length===0) {
        return StudentData;
    }
     return StudentData.filter(f=>f.CityId==e.data.CityId);
}

function setCellCityValue(rowData,value) {
    rowData.CityId = value;
    rowData.DistrictId = null;
}

//function returnSearchClass() {

//}

function GetFormStudentSearchData() {
    
    //formSearchObject.ClassStudent 
    //formSearchObject.DoB 
       formSearchObject = $('#dxFormSearch').dxForm('instance').option("formData");

    searchOptions = {
        ClassStudent : formSearchObject.ClassStudent,
        Year : formSearchObject.DoB
    }
    if (searchOptions.ClassStudent == undefined || searchOptions.ClassStudent == null) {
        searchOptions.ClassStudent = ""
    }
    if(searchOptions.Year == undefined || searchOptions.Year == null) {
        searchOptions.Year = ""
    }
    return JSON.stringify(searchOptions);
    
}

function Search_Click(e){
     if (formSearchObject.ClassStudent != null  || formSearchObject.ClassStudent != undefined || formSearchObject.DoB != null || formSearchObject.DoB != undefined) {
         /*formSearchObject.ClusterCode != null && formSearchObject.BranchStaffId != null && formSearchObject.GroupCode != null*/
            //$("#btnQuickInput").dxButton({ disabled: false });
            //$("#txtCreateSuggetion").dxButton({ disabled: false });
            //$("#btnUpdateSurvey").dxButton({ disabled: false }); 
            //$("#btnCreateSurvey").dxButton({ disabled: false });
            //$("#btnEditAll").dxButton({ disabled: false });
            //$("#btnSuggest").dxButton({ disabled: false });
            //$("#btnDelete").dxButton({ disabled: false });
            dxDataGrid.refresh();
        }
        else {
            //$("#txtCreateSuggetion").dxButton({ disabled: true });
            //$("#btnUpdateSurvey").dxButton({ disabled: true }); 
            //$("#btnQuickInput").dxButton({ disabled: true });
            //$("#btnCreateSurvey").dxButton({ disabled: true });
            //$("#btnEditAll").dxButton({ disabled: true });
            //$("#btnSuggest").dxButton({ disabled: true });
            // $("#btnDelete").dxButton({ disabled: true });
            DevExpress.ui.notify({ message: "Vui lòng chọn mục cần tìm", width: 1000, shading: true }, "warning", 1000);
        }
}



function Clear_Click() {
      dxformSearch.option("formData", null);
      
        //dxformSearch.getEditor("ClassStudent").option("value", null);
        //dxformSearch.getEditor("year").option('value', null);
        //if (formSearchObject.ClusterCode == null) {
        //    //$("#txtAddCustomer").dxButton({ disabled: true });
        //    $("#txtCreateSuggetion").dxButton({ disabled: true });
        //}
        formSearchObject = $('#dxFormSearch').dxForm('instance').option("formData");
        dxDataGrid.refresh();

}

function Class_ValueChanged() {

}

function slNoDataGridStudent(container, e) {
     var index = dxDataGrid.pageIndex() * dxDataGrid.pageSize() + e.rowIndex + 1;
     container.text(index);
}

function SuggestDelete(e) {
     var selectedRows = dxDataGrid.getSelectedRowsData();
    var result = DevExpress.ui.dialog.confirm("<i>Bạn có chắc muốn xóa </i>"+ selectedRows.length +" Student đã chọn?", "Cảnh báo !!!");
    result.done(function (dialogResult) {
        if (dialogResult == true) { 
           
            //var isSuggest = false;
            if (selectedRows.length > 0) {
                var lstId = [];
                  for (i = 0; i < selectedRows.length; i++) {
                        lstId.push(selectedRows[i].SchedulerId);
                    }
                 //lstId.push(e.row.data.SchedulerId);
                var parameter = { lstId: lstId }
                $.ajax({
                    url: "/Tests/DeleteSelection",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    async: false,
                    cache: false,
                    data: parameter
                }).done(function(rs) {
                    //if (rs.Status == 200) {
                        DevExpress.ui.dialog.alert("Xóa thành công!", "Thông báo!");
                        dxDataGrid.refresh();
                        dxDataGrid.clearSelection();
                    //}
                    //else {
                        //DevExpress.ui.dialog.alert(rs.Message, "Thông báo!");
                    //}
                });
            } else {
                DevExpress.ui.dialog.alert("Vui lòng chọn dữ liệu để tiến hành kiểm tra!", "Thông báo!");
            }
        }
    })
}


// thay changeData vào dataGrid
function UpdateAll() {
    dxQuickInputObject = $("#dxFormQuickInput").dxForm('instance').option("formData");
    // lay thông tin sv
    //var student = $("#")
    var selectedRowsData = dxDataGrid.getSelectedRowsData();
    let grid = dxDataGrid.getDataSource().items();  //__rawData;
    if (selectedRowsData.length > 0) {
        var result = DevExpress.ui.dialog.confirm("<i>Bạn có chắc muốn nhập nhanh dữ liệu cho </i>" + selectedRowsData.length + " dòng dữ liệu đã chọn?", "Cảnh báo !!!");
        result.done(function(dialogResult) {
            if (dialogResult == true) {
                for (var i = 0; i < grid.length; i++) {
                    for (var j = 0; j < selectedRowsData.length; j++) {
                        if (grid[i].SchedulerId == selectedRowsData[j].SchedulerId) {
                            if (dxQuickInputObject.ClassStudent != null) {
                                dxDataGrid.cellValue(i, "ClassStudent", dxQuickInputObject.ClassStudent);
                            }
                            if (dxQuickInputObject.CityId != null) {
                                dxDataGrid.cellValue(i, "CityId", dxQuickInputObject.CityId);
                            }
                            if (dxQuickInputObject.DistrictId != null) {
                                dxDataGrid.cellValue(i, "DistrictId", dxQuickInputObject.DistrictId);
                            }
                        }
                    }
                }
                DevExpress.ui.dialog.alert("<i>Nhập liệu nhanh thành công!</i>", "Thông báo");
                dxDataGrid.clearSelection();
                dxPopupEditAll.hide();
            }
        })
    }
    else {
         DevExpress.ui.dialog.alert("<i>Vui lòng chọn dòng dữ liệu cần nhập liệu nhanh!</i>", "Thông báo");
    }
}

function ShowPopupEditAll(){
    var selectedRows = dxDataGrid.getSelectedRowsData();
    if (selectedRows.length > 0) {
        var selectedRows = dxDataGrid.getSelectedRowsData();
          keyObjectUpdate = null;
         dxPopupEditAll.show();
        //ShowPopupQuickInput();
    } else {
        DevExpress.ui.dialog.alert("<i>Vui lòng chọn sinh viên để chỉnh sửa nhanh!</i>", "Thông báo");
    }
} 

//function ShowPopupQuickInput() {
   
//}

// update DB  selected_student    (UpdateLoanDocument)
function UpdateDataGridStudent (){
     var result = DevExpress.ui.dialog.confirm("<i>Bạn có chắc muốn cập nhật dữ liệu đã chọn? </i>", "Cảnh báo !!!");
        result.done(function (dialogResult) {
            if (dialogResult) {
                var selectedRowsData = dxDataGrid.getSelectedRowsData();
                if (changesDxGridStudent != undefined) {
                    if (selectedRowsData.length > 0 && changesDxGridStudent.length > 0) {
                        for (i = 0; i < selectedRowsData.length; i++) {
                            for (j = 0; j < changesDxGridStudent.length; j++) {
                                if (selectedRowsData[i].SchedulerId == changesDxGridStudent[j].key) {
                                    selectedRowsData[i].ClassStudent = changesDxGridStudent[j].data.ClassStudent ?? selectedRowsData[i].ClassStudent
                                    selectedRowsData[i].CityId = changesDxGridStudent[j].data.CityId ?? selectedRowsData[i].CityId
                                    selectedRowsData[i].DistrictId = changesDxGridStudent[j].data.DistrictId ?? selectedRowsData[i].DistrictId
                                }
                            }
                        }
                    }
                    var parameter = { lstModel: selectedRowsData };
                    $.ajax({
                        url: "/Tests/Update",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                        async: false,
                        cache: false,
                        data: parameter
                    }).done(function(rs) {
                        DevExpress.ui.dialog.alert("Cập nhật thành công!", "Thông báo!");
                        dxDataGrid.refresh();
                        dxDataGrid.clearSelection();
                    });
                }
            } else {
                DevExpress.ui.dialog.alert("Chưa Cập nhật dữ liệu!", "Thông báo!");
            }
        })
}

function OnOptionChangeddxGridStudent(e) {
    if (e.name === "editing") {
        changesDxGridStudent = e.component.option("editing.changes");
            changesDxGridStudent = changesDxGridStudent.map((change) => {
                return {
                    type: change.type,
                    key: change.type !== "change" ? change.key : undefined,
                    data: change.data
                };
            });
    }
}
</script>


@*Tìm kiếm dữ liệu*@
<div class="page-body mb-3 border rounded p-2 border-success">
    <div class="card-custom">
        <div class="card-header-custom row">
            <div class="col-md-8">
                <h5>Bộ lọc</h5>
            </div>
            <div class="col-md-4">
                <div class="card-header-right-custom">
                    <ul class="list-unstyled card-option">
                        <li><i class="feather icon-maximize full-card"></i></li>
                        <li>
                            <i class="feather icon-minus minimize-card"></i>
                        </li>
                    </ul>
                </div>
            </div>
        </div>       

        <div class="card-block table-border-style">            
            @(Html.DevExtreme().Form<StudentSearchDTO>().ID("dxFormSearch").ScrollingEnabled(true).LabelLocation(FormLabelLocation.Top)
                .Items(items => //LoanSearchDto
                {
                    items.AddGroup().ColCountByScreen(e => e.Xs(1).Sm(2).Md(4).Lg(4))
                        .Items(grItem =>
                        {
                                                                                                                                                                                                       @*                       grItem.AddSimpleFor(m => m.ClassStudent)
                                .Editor(e => e.DropDownBox()
                                .DataSource(d => d.Mvc().Controller("Tests").LoadAction("GetStudent").LoadMethod("Get").LoadMode(DataSourceLoadMode.Raw).LoadParams(new { searchOptions = new JS("returnSearchClass") }).Key("SchedulerId"))
                                .ValueExpr("SchedulerId").DisplayExpr("ClassStudent").Placeholder("chọn class...").Hint("Không chọn mặc định lấy tất cả").ContentTemplate(new TemplateName("ContentTemplate_ClassStudent")).ShowClearButton(true));*@

                            grItem.AddSimpleFor(m => m.ClassStudent)
                                .Editor(e=>e.SelectBox()
                                    .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetClassStudent").LoadMode(DataSourceLoadMode.Processed).Key("ClassStudent"))
                                    .ValueExpr("ClassStudent").DisplayExpr("ClassStudent").Placeholder("chọn class...").Hint("Không chọn mặc định lấy tất cả")
                                );
                            grItem.AddSimpleFor(m=>m.DoB)
                                .Editor(e=>e.SelectBox()
                                    .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetYearDob").LoadMode(DataSourceLoadMode.Processed).Key("Year"))
                                    .ValueExpr("Year").DisplayExpr("Year").Placeholder("chọn class...").Hint("Không chọn mặc định lấy tất cả")
                                );

                        });
                    items.AddGroup().ColCountByScreen(e => e.Xs(1).Sm(2).Md(4).Lg(4))
                        .Items(grItem =>
                        {
                               
                        });
                    items.AddGroup().ColCountByScreen(e => e.Xs(2).Sm(2).Md(6).Lg(8))
                        .Items(grItem =>
                        {
                            grItem.AddButton().ButtonOptions(e => e.OnClick("Search_Click").ID("btnSearch").Type(ButtonType.Success).Disabled(false).UseSubmitBehavior(false).Text("Tìm kiếm").Width("100%").Type(ButtonType.Success));
                            grItem.AddButton().ButtonOptions(e => e.OnClick("Clear_Click").Text("Xóa bộ lọc").Width("100%").Type(ButtonType.Normal));
                        });
                })
                )            
        </div>
    </div>
    @using (Html.DevExtreme().NamedTemplate("ContentTemplate_ClassStudent"))
    {
        @(Html.DevExtreme().DataGrid<Student>()
                                                                                                                                                                                                                        @*  .DataSource(d => d.Mvc().Controller("Tests").LoadAction("GetClassDoB").Key("SchedulerId"))*@
            .DataSource(new JS(@"component.getDataSource()"))
            .ID("ClassStudent_embedded_datagrid")
            .Columns(c =>
            {
                c.AddFor(e => e.ClassStudent).AllowResizing(true);
                c.AddFor(e => e.DoB);
            })
                .ColumnAutoWidth(true)
            .FilterRow(f => f.Visible(true))
            .SearchPanel(S => S.Visible(true).SearchVisibleColumnsOnly(true))
            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
            .HoverStateEnabled(true)
            .Selection(s => s.Mode(SelectionMode.Single))
            .FocusedRowEnabled(true)
            .FocusedRowKey(new JS("component.option('value')"))
            .Paging(p => p.PageSize(5))
            .OnRowClick(
                                                                                @<text>
                                                                                function(selectedItems) {  
                                                                                    var data = selectedItems.data;                           
                                                                                    component.option("value", data.SchedulerId);
                                                                                    component.close();    
                                                                                    @*Class_ValueChanged(data.ClassStudent);                           *@
                                                                                }
                                                                                </text>
                )
            )
    }
</div>

@*Popup Tạo mới*@

<div>
    @(Html.DevExtreme().Popup()
        .ToolbarItems(t =>
        {
            t.Add().Location(ToolbarItemLocation.After).Toolbar(Toolbar.Bottom)
                .Widget(w => w.Button().Type(ButtonType.Success).OnClick("Create").Icon("save").Text("Lưu"));
            t.Add().Location(ToolbarItemLocation.After).Toolbar(Toolbar.Bottom)
                .Widget(w => w.Button().Type(ButtonType.Danger)
                .OnClick("HidePopupCreate").Icon("close").Text("Đóng"));
        })
        .ID("create-popup")
        .ShowTitle(true)
        .Height("600")
        .Title("Create new")
        .DragEnabled(false)
        .ShowCloseButton(false)
        .CloseOnOutsideClick(false)
        .ContentTemplate(new TemplateName("form-create-template"))
        )
</div>


@using (Html.DevExtreme().NamedTemplate("form-create-template")) {
    @(Html.DevExtreme().Form<Student>().LabelLocation(FormLabelLocation.Top)
        .Items(i=>{
            i.AddSimpleFor(m=>m.Name).Editor(e=>e.TextBox());
            i.AddSimpleFor(m=>m.DoB).Editor(e=>e.DateBox().DisplayFormat("dd/MM/yyyy").Value(DateTime.Now.Date).ShowClearButton(true));
            i.AddSimpleFor(m=>m.ClassStudent).Editor(e=>e.TextBox());
    @*i.AddSimpleFor(m=>m.HinhAnh).Editor(e=>e.TextBox());*@
            i.AddSimpleFor(m=>m.CityId)
                .Editor(e=>e.SelectBox().SearchEnabled(true)
                .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetCity").LoadMode(DataSourceLoadMode.Processed).Key("Id"))
                .ValueExpr("Id").DisplayExpr("City1").OnValueChanged("City_ValueChanged").Placeholder("chọn City...").Hint("Không chọn mặc định lấy tất cả").ShowClearButton(true)
            );
            i.AddSimpleFor(m=>m.DistrictId)
            .Editor(e=>e.SelectBox().SearchEnabled(true)
            .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetDistrictByCity").LoadParams(new {cityId = new JS("GetCityId") }).LoadMode(DataSourceLoadMode.Processed).Key("Id"))
            .ValueExpr("Id").DisplayExpr("District1").Placeholder("chọn District...").Hint("Không chọn mặc định lấy tất cả").ShowClearButton(true)
            );
    @* i.AddSimpleFor(m=>m.Name)
                .Editor(e=>e.DropDownBox()
                .DataSource(d=>d.Mvc().Controller("Student").LoadAction("GetSampleData").LoadMethod("Get").LoadMode(DataSourceLoadMode.Raw).Key("OrderID"))
                .ValueExpr("CustomerName").DisplayExpr("CustomerName").Placeholder("chọn ten...").Hint("Không chọn mặc định lấy tất cả")
                );*@
    @*    i.AddSimpleFor(m=>m.Description).Editor(e=>e.TextArea());*@
        })
        .ID("formCreate")
        .LabelMode(FormLabelMode.Floating)
        .LabelLocation(FormLabelLocation.Left)
        .MinColWidth(300)
        .ReadOnly(false)
        .ShowColonAfterLabel(true)
    )
}


@*Popup Update Student*@
<div>
    @(Html.DevExtreme().Popup()
        .ToolbarItems(t =>
        {
            t.Add().Location(ToolbarItemLocation.After).Toolbar(Toolbar.Bottom)
                .Widget(w => w.Button().Type(ButtonType.Success).OnClick("UpdateStudent").Icon("save").Text("Lưu"));
            t.Add().Location(ToolbarItemLocation.After).Toolbar(Toolbar.Bottom)
                .Widget(w => w.Button().Type(ButtonType.Danger)
                .OnClick("HidePopupUpdate").Icon("close").Text("Đóng"));
        })
        .ID("update-popup")
        .ShowTitle(true)
        .Height("100%")
        .Title("Update Student")
        .DragEnabled(false)
        .ShowCloseButton(false)
        .CloseOnOutsideClick(false)
        .ContentTemplate(new TemplateName("form-update-template"))
        )
</div>

@*Popup hỗ trợ nhập liệu nhanh*@
<div>
    @(Html.DevExtreme().Popup()
        .ToolbarItems(t =>
        {
            t.Add().Location(ToolbarItemLocation.After).Toolbar(Toolbar.Bottom)
            .Widget(w => w.Button().Type(ButtonType.Success).OnClick("UpdateAll").Icon("save").Text("Lưu"));
        t.Add().Location(ToolbarItemLocation.After).Toolbar(Toolbar.Bottom)
            .Widget(w => w.Button().Type(ButtonType.Danger)
            .OnClick("HidePopupQuickInput").Icon("close").Text("Đóng"));
        })
        .ID("update-select-popup")
        .ShowTitle(true)
        .Height("100%")
        .Title("Hỗ trợ nhập liệu nhanh")
        .DragEnabled(false)
        .ShowCloseButton(true)
        .CloseOnOutsideClick(false)
        .ContentTemplate(@<text>
            @(Html.DevExtreme().Form<Student>().ID("dxFormQuickInput").ScrollingEnabled(true).LabelLocation(FormLabelLocation.Top)
                .Items(i=>{
                i.AddSimpleFor(m=>m.ClassStudent).Editor(e=>e.TextBox());
                i.AddSimpleFor(m=>m.CityId)
                .Editor(e=>e.SelectBox().SearchEnabled(true)
                .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetCity").LoadMode(DataSourceLoadMode.Processed).Key("Id"))
                .ValueExpr("Id").DisplayExpr("City1").OnValueChanged("City_ValueChanged").Placeholder("chọn City...").Hint("Không chọn mặc định lấy tất cả").ShowClearButton(true)
                );
                i.AddSimpleFor(m=>m.DistrictId)
                .Editor(e=>e.SelectBox().SearchEnabled(true)
                .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetDistrictByCity").LoadParams(new {cityId = new JS("GetCityId") }).LoadMode(DataSourceLoadMode.Processed).Key("Id"))
                .ValueExpr("Id").DisplayExpr("District1").Placeholder("chọn District...").Hint("Không chọn mặc định lấy tất cả").ShowClearButton(true)
                );
                })
            )
        </text>)
        )
</div>


@using (Html.DevExtreme().NamedTemplate("form-update-template")) {
    @(Html.DevExtreme().Form<Student>().LabelLocation(FormLabelLocation.Top)
        .Items(i=>{
            i.AddSimpleFor(m=>m.Name).Editor(e=>e.TextBox());
            i.AddSimpleFor(m=>m.DoB).Editor(e=>e.DateBox().DisplayFormat("dd/MM/yyyy").Value(DateTime.Now.Date).ShowClearButton(true));
            i.AddSimpleFor(m=>m.ClassStudent).Editor(e=>e.TextBox());
    @*i.AddSimpleFor(m=>m.HinhAnh).Editor(e=>e.TextBox());*@
            i.AddSimpleFor(m=>m.CityId)
                .Editor(e=>e.SelectBox().SearchEnabled(true)
                .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetCity").LoadMode(DataSourceLoadMode.Processed).Key("Id"))
                .ValueExpr("Id").DisplayExpr("City1").OnValueChanged("City_ValueChanged").Placeholder("chọn City...").Hint("Không chọn mặc định lấy tất cả").ShowClearButton(true)
            );
            i.AddSimpleFor(m=>m.DistrictId)
            .Editor(e=>e.SelectBox().SearchEnabled(true)
            .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetDistrictByCity").LoadParams(new {cityId = new JS("GetCityId") }).LoadMode(DataSourceLoadMode.Processed).Key("Id"))
            .ValueExpr("Id").DisplayExpr("District1").Placeholder("chọn District...").Hint("Không chọn mặc định lấy tất cả").ShowClearButton(true)
            );
    @* i.AddSimpleFor(m=>m.Name)
                .Editor(e=>e.DropDownBox()
                .DataSource(d=>d.Mvc().Controller("Student").LoadAction("GetSampleData").LoadMethod("Get").LoadMode(DataSourceLoadMode.Raw).Key("OrderID"))
                .ValueExpr("CustomerName").DisplayExpr("CustomerName").Placeholder("chọn ten...").Hint("Không chọn mặc định lấy tất cả")
                );*@
    @*    i.AddSimpleFor(m=>m.Description).Editor(e=>e.TextArea());*@
        })
        .ID("formUpdate")
        .LabelMode(FormLabelMode.Floating)
        .LabelLocation(FormLabelLocation.Left)
        .MinColWidth(300)
        .ReadOnly(false)
        .ShowColonAfterLabel(true)
    )
}

@(Html.DevExtreme().DataGrid<Student>().ID("dataGridStudent")
    .DataSource(d => d.Mvc().Controller("Tests")
        .LoadAction("GetStudent")
        .LoadParams(new { searchOptions = new JS("GetFormStudentSearchData")})
        .Key("SchedulerId")
        .LoadMethod("Post")
        )
    .Columns(columns => {
        columns.Add().DataField("STT").Width("40px").CellTemplate(new JS("slNoDataGridStudent")).AllowFiltering(false).AllowSorting(false);
        columns.AddFor(m => m.Name);
        columns.AddFor(m => m.ClassStudent);
        columns.AddFor(m => m.DoB);
        columns.AddFor(m => m.CityId)
            .SetCellValue("setCellCityValue")
            .Lookup(l=>l
                .DataSource(d=>d.Mvc().Controller("Tests").LoadAction("GetCity").Key("Id"))
                .ValueExpr("Id").DisplayExpr("City1"))
            .EditorOptions(new { showClearButton = true })
            .AllowEditing(true);
        columns.AddFor(m => m.DistrictId)
            .Lookup(l=>l
                .DataSource(new JS("GetCityIdFromDataGrid"))
                .ValueExpr("Id").DisplayExpr("District.District1"))
            .EditorOptions(new { showClearButton = true });
        columns.Add().Caption("Action")
            .Type(GridCommandColumnType.Buttons)
            .Buttons(b=>{
                b.Add().Icon("edit").Text("edit").OnClick("update_student");
                b.Add().Icon("close").Hint("remove").OnClick("delete_student");
            });
    })
     .Toolbar(t=>{
        t.Items(i=>{
            i.Add().Name(DataGridToolbarItem.GroupPanel);
            i.Add().Name(DataGridToolbarItem.SearchPanel);
            i.Add().Name(DataGridToolbarItem.ColumnChooserButton);
            i.Add().Location(ToolbarItemLocation.After).Widget(w=>w.Button().Text("Create new").ID("btnCreate").Type(ButtonType.Success).OnClick("popUpCreateNew"));
            i.Add().Location(ToolbarItemLocation.Before).Widget(w => w.Button().Icon("edit")
                            .Text("Chỉnh sửa hàng loạt").ID("btnEditAll").Type(ButtonType.Success).Disabled(false)
                            .OnClick("ShowPopupEditAll"));
            i.Add().Location(ToolbarItemLocation.Before).Widget(w => w.Button().Icon("close")
                                .Text("Xóa").ID("btnDelete").OnClick("SuggestDelete").Type(ButtonType.Danger).Disabled(false));
            i.Add().Location(ToolbarItemLocation.After).Widget(w => w.Button().Icon("save")
                                .Text("Lưu").ID("btnUpdateDataGridStudent").Type(ButtonType.Success).Disabled(false)
                                            .OnClick("UpdateDataGridStudent"));//@<text>function(e){$("#dxGridLoan").dxDataGrid
        });
    })
    
    .ShowBorders(true)
    .ShowRowLines(true)
    .Paging(p => p.PageSize(10))
    .HeaderFilter(f => f.Visible(true))
    .SearchPanel(e => e.Visible(true))
    .ColumnChooser(c => c.Enabled(true).Mode(GridColumnChooserMode.Select).Title("Chọn cột").AllowSearch(true))
    .FilterPanel(filterPanel => filterPanel.Visible(true))
    .FilterRow(filterRow => filterRow.Visible(true))
    .Selection(s=>s.Mode(SelectionMode.Multiple))
    .KeyboardNavigation(options => { options.EnterKeyAction(GridEnterKeyAction.MoveFocus); options.EditOnKeyPress(true); options.EnterKeyDirection(GridEnterKeyDirection.Column); })
    @*.GroupPanel(p => p.Visible(true))*@
    .Grouping(g => g.AutoExpandAll(false))
    .Editing(e => e.Mode(GridEditMode.Batch).StartEditAction(GridStartEditAction.DblClick).AllowUpdating(true))
    .RemoteOperations(true)
    .OnOptionChanged("OnOptionChangeddxGridStudent")
    @* .Summary(s => s
        .TotalItems(totalItems => {
            totalItems.AddFor(m => m.ShipCity).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems => {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
    )*@
)